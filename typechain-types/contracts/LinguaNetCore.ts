/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface LinguaNetCoreInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MIN_AUDIO_DURATION"
      | "PLATFORM_FEE_PERCENT"
      | "SUBMISSION_REWARD"
      | "VALIDATION_REWARD"
      | "audioSubmissions"
      | "calculateDatasetPrice"
      | "contributors"
      | "getContributorStats"
      | "getLanguageStats"
      | "isLanguageSupported"
      | "languages"
      | "owner"
      | "pendingWithdrawals"
      | "purchaseDataset"
      | "registerValidator"
      | "renounceOwnership"
      | "submitAudio"
      | "supportedLanguages"
      | "transferOwnership"
      | "usdcToken"
      | "validateAudio"
      | "validators"
      | "withdrawEarnings"
      | "withdrawToMobileMoney"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AudioSubmitted"
      | "AudioValidated"
      | "DatasetPurchased"
      | "OwnershipTransferred"
      | "WithdrawalToMobileMoney"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "MIN_AUDIO_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PLATFORM_FEE_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SUBMISSION_REWARD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATION_REWARD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "audioSubmissions",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateDatasetPrice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "contributors",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getContributorStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLanguageStats",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isLanguageSupported",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "languages", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingWithdrawals",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseDataset",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerValidator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitAudio",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedLanguages",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "usdcToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "validateAudio",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "validators",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEarnings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToMobileMoney",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "MIN_AUDIO_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PLATFORM_FEE_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SUBMISSION_REWARD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATION_REWARD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "audioSubmissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateDatasetPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContributorStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLanguageStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLanguageSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "languages", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchaseDataset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitAudio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedLanguages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdcToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validateAudio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validators", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToMobileMoney",
    data: BytesLike
  ): Result;
}

export namespace AudioSubmittedEvent {
  export type InputTuple = [
    contributor: AddressLike,
    language: string,
    cid: string,
    reward: BigNumberish
  ];
  export type OutputTuple = [
    contributor: string,
    language: string,
    cid: string,
    reward: bigint
  ];
  export interface OutputObject {
    contributor: string;
    language: string;
    cid: string;
    reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AudioValidatedEvent {
  export type InputTuple = [
    validator: AddressLike,
    cid: string,
    isValid: boolean,
    reward: BigNumberish
  ];
  export type OutputTuple = [
    validator: string,
    cid: string,
    isValid: boolean,
    reward: bigint
  ];
  export interface OutputObject {
    validator: string;
    cid: string;
    isValid: boolean;
    reward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DatasetPurchasedEvent {
  export type InputTuple = [
    buyer: AddressLike,
    language: string,
    amount: BigNumberish
  ];
  export type OutputTuple = [buyer: string, language: string, amount: bigint];
  export interface OutputObject {
    buyer: string;
    language: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawalToMobileMoneyEvent {
  export type InputTuple = [
    user: AddressLike,
    amount: BigNumberish,
    phoneNumber: string,
    provider: string
  ];
  export type OutputTuple = [
    user: string,
    amount: bigint,
    phoneNumber: string,
    provider: string
  ];
  export interface OutputObject {
    user: string;
    amount: bigint;
    phoneNumber: string;
    provider: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LinguaNetCore extends BaseContract {
  connect(runner?: ContractRunner | null): LinguaNetCore;
  waitForDeployment(): Promise<this>;

  interface: LinguaNetCoreInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MIN_AUDIO_DURATION: TypedContractMethod<[], [bigint], "view">;

  PLATFORM_FEE_PERCENT: TypedContractMethod<[], [bigint], "view">;

  SUBMISSION_REWARD: TypedContractMethod<[], [bigint], "view">;

  VALIDATION_REWARD: TypedContractMethod<[], [bigint], "view">;

  audioSubmissions: TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, bigint, bigint, boolean, bigint] & {
        contributor: string;
        language: string;
        cid: string;
        duration: bigint;
        timestamp: bigint;
        validated: boolean;
        quality: bigint;
      }
    ],
    "view"
  >;

  calculateDatasetPrice: TypedContractMethod<
    [_language: string],
    [bigint],
    "view"
  >;

  contributors: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, string, boolean] & {
        submissions: bigint;
        validations: bigint;
        earnings: bigint;
        reputation: bigint;
        ensName: string;
        isValidator: boolean;
      }
    ],
    "view"
  >;

  getContributorStats: TypedContractMethod<
    [_contributor: AddressLike],
    [
      [bigint, bigint, bigint] & {
        submissions: bigint;
        earnings: bigint;
        reputation: bigint;
      }
    ],
    "view"
  >;

  getLanguageStats: TypedContractMethod<
    [_language: string],
    [
      [bigint, bigint, bigint, bigint] & {
        clips: bigint;
        duration: bigint;
        contributorCount: bigint;
        price: bigint;
      }
    ],
    "view"
  >;

  isLanguageSupported: TypedContractMethod<
    [_language: string],
    [boolean],
    "view"
  >;

  languages: TypedContractMethod<
    [arg0: string],
    [
      [bigint, bigint, bigint, bigint] & {
        totalClips: bigint;
        totalDuration: bigint;
        totalContributors: bigint;
        basePrice: bigint;
      }
    ],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pendingWithdrawals: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  purchaseDataset: TypedContractMethod<[_language: string], [void], "payable">;

  registerValidator: TypedContractMethod<[], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  submitAudio: TypedContractMethod<
    [_language: string, _cid: string, _duration: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportedLanguages: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  usdcToken: TypedContractMethod<[], [string], "view">;

  validateAudio: TypedContractMethod<
    [_cid: string, _isValid: boolean],
    [void],
    "nonpayable"
  >;

  validators: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  withdrawEarnings: TypedContractMethod<[], [void], "nonpayable">;

  withdrawToMobileMoney: TypedContractMethod<
    [_phoneNumber: string, _provider: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MIN_AUDIO_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PLATFORM_FEE_PERCENT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SUBMISSION_REWARD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VALIDATION_REWARD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "audioSubmissions"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, string, string, bigint, bigint, boolean, bigint] & {
        contributor: string;
        language: string;
        cid: string;
        duration: bigint;
        timestamp: bigint;
        validated: boolean;
        quality: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateDatasetPrice"
  ): TypedContractMethod<[_language: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "contributors"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, string, boolean] & {
        submissions: bigint;
        validations: bigint;
        earnings: bigint;
        reputation: bigint;
        ensName: string;
        isValidator: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContributorStats"
  ): TypedContractMethod<
    [_contributor: AddressLike],
    [
      [bigint, bigint, bigint] & {
        submissions: bigint;
        earnings: bigint;
        reputation: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLanguageStats"
  ): TypedContractMethod<
    [_language: string],
    [
      [bigint, bigint, bigint, bigint] & {
        clips: bigint;
        duration: bigint;
        contributorCount: bigint;
        price: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isLanguageSupported"
  ): TypedContractMethod<[_language: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "languages"
  ): TypedContractMethod<
    [arg0: string],
    [
      [bigint, bigint, bigint, bigint] & {
        totalClips: bigint;
        totalDuration: bigint;
        totalContributors: bigint;
        basePrice: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingWithdrawals"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "purchaseDataset"
  ): TypedContractMethod<[_language: string], [void], "payable">;
  getFunction(
    nameOrSignature: "registerValidator"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitAudio"
  ): TypedContractMethod<
    [_language: string, _cid: string, _duration: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportedLanguages"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdcToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "validateAudio"
  ): TypedContractMethod<
    [_cid: string, _isValid: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validators"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawEarnings"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawToMobileMoney"
  ): TypedContractMethod<
    [_phoneNumber: string, _provider: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AudioSubmitted"
  ): TypedContractEvent<
    AudioSubmittedEvent.InputTuple,
    AudioSubmittedEvent.OutputTuple,
    AudioSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "AudioValidated"
  ): TypedContractEvent<
    AudioValidatedEvent.InputTuple,
    AudioValidatedEvent.OutputTuple,
    AudioValidatedEvent.OutputObject
  >;
  getEvent(
    key: "DatasetPurchased"
  ): TypedContractEvent<
    DatasetPurchasedEvent.InputTuple,
    DatasetPurchasedEvent.OutputTuple,
    DatasetPurchasedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawalToMobileMoney"
  ): TypedContractEvent<
    WithdrawalToMobileMoneyEvent.InputTuple,
    WithdrawalToMobileMoneyEvent.OutputTuple,
    WithdrawalToMobileMoneyEvent.OutputObject
  >;

  filters: {
    "AudioSubmitted(address,string,string,uint256)": TypedContractEvent<
      AudioSubmittedEvent.InputTuple,
      AudioSubmittedEvent.OutputTuple,
      AudioSubmittedEvent.OutputObject
    >;
    AudioSubmitted: TypedContractEvent<
      AudioSubmittedEvent.InputTuple,
      AudioSubmittedEvent.OutputTuple,
      AudioSubmittedEvent.OutputObject
    >;

    "AudioValidated(address,string,bool,uint256)": TypedContractEvent<
      AudioValidatedEvent.InputTuple,
      AudioValidatedEvent.OutputTuple,
      AudioValidatedEvent.OutputObject
    >;
    AudioValidated: TypedContractEvent<
      AudioValidatedEvent.InputTuple,
      AudioValidatedEvent.OutputTuple,
      AudioValidatedEvent.OutputObject
    >;

    "DatasetPurchased(address,string,uint256)": TypedContractEvent<
      DatasetPurchasedEvent.InputTuple,
      DatasetPurchasedEvent.OutputTuple,
      DatasetPurchasedEvent.OutputObject
    >;
    DatasetPurchased: TypedContractEvent<
      DatasetPurchasedEvent.InputTuple,
      DatasetPurchasedEvent.OutputTuple,
      DatasetPurchasedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "WithdrawalToMobileMoney(address,uint256,string,string)": TypedContractEvent<
      WithdrawalToMobileMoneyEvent.InputTuple,
      WithdrawalToMobileMoneyEvent.OutputTuple,
      WithdrawalToMobileMoneyEvent.OutputObject
    >;
    WithdrawalToMobileMoney: TypedContractEvent<
      WithdrawalToMobileMoneyEvent.InputTuple,
      WithdrawalToMobileMoneyEvent.OutputTuple,
      WithdrawalToMobileMoneyEvent.OutputObject
    >;
  };
}
