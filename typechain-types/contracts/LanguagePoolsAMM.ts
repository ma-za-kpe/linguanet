/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface LanguagePoolsAMMInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "FEE_DENOMINATOR"
      | "MINIMUM_LIQUIDITY"
      | "addLiquidity"
      | "buyData"
      | "createPool"
      | "dataAccessBalance"
      | "defaultFee"
      | "getAmountOut"
      | "getPrice"
      | "languagePools"
      | "liquidityPositions"
      | "oraclePrices"
      | "owner"
      | "removeLiquidity"
      | "renounceOwnership"
      | "sellData"
      | "transferOwnership"
      | "twapPrices"
      | "usdcToken"
      | "voiceShares"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DataPurchased"
      | "DataSold"
      | "LiquidityAdded"
      | "LiquidityRemoved"
      | "OwnershipTransferred"
      | "PoolCreated"
      | "PriceUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "FEE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMUM_LIQUIDITY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyData",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createPool",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dataAccessBalance",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOut",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getPrice", values: [string]): string;
  encodeFunctionData(
    functionFragment: "languagePools",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidityPositions",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "oraclePrices",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellData",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "twapPrices", values: [string]): string;
  encodeFunctionData(functionFragment: "usdcToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "voiceShares",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "FEE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMUM_LIQUIDITY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createPool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dataAccessBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "defaultFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "languagePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidityPositions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oraclePrices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "twapPrices", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usdcToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voiceShares",
    data: BytesLike
  ): Result;
}

export namespace DataPurchasedEvent {
  export type InputTuple = [
    language: string,
    buyer: AddressLike,
    usdcIn: BigNumberish,
    dataOut: BigNumberish
  ];
  export type OutputTuple = [
    language: string,
    buyer: string,
    usdcIn: bigint,
    dataOut: bigint
  ];
  export interface OutputObject {
    language: string;
    buyer: string;
    usdcIn: bigint;
    dataOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DataSoldEvent {
  export type InputTuple = [
    language: string,
    seller: AddressLike,
    dataIn: BigNumberish,
    usdcOut: BigNumberish
  ];
  export type OutputTuple = [
    language: string,
    seller: string,
    dataIn: bigint,
    usdcOut: bigint
  ];
  export interface OutputObject {
    language: string;
    seller: string;
    dataIn: bigint;
    usdcOut: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityAddedEvent {
  export type InputTuple = [
    language: string,
    provider: AddressLike,
    usdcAmount: BigNumberish,
    dataAmount: BigNumberish
  ];
  export type OutputTuple = [
    language: string,
    provider: string,
    usdcAmount: bigint,
    dataAmount: bigint
  ];
  export interface OutputObject {
    language: string;
    provider: string;
    usdcAmount: bigint;
    dataAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidityRemovedEvent {
  export type InputTuple = [
    language: string,
    provider: AddressLike,
    liquidity: BigNumberish
  ];
  export type OutputTuple = [
    language: string,
    provider: string,
    liquidity: bigint
  ];
  export interface OutputObject {
    language: string;
    provider: string;
    liquidity: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PoolCreatedEvent {
  export type InputTuple = [language: string, initialPrice: BigNumberish];
  export type OutputTuple = [language: string, initialPrice: bigint];
  export interface OutputObject {
    language: string;
    initialPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PriceUpdatedEvent {
  export type InputTuple = [language: string, newPrice: BigNumberish];
  export type OutputTuple = [language: string, newPrice: bigint];
  export interface OutputObject {
    language: string;
    newPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LanguagePoolsAMM extends BaseContract {
  connect(runner?: ContractRunner | null): LanguagePoolsAMM;
  waitForDeployment(): Promise<this>;

  interface: LanguagePoolsAMMInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  FEE_DENOMINATOR: TypedContractMethod<[], [bigint], "view">;

  MINIMUM_LIQUIDITY: TypedContractMethod<[], [bigint], "view">;

  addLiquidity: TypedContractMethod<
    [language: string, usdcAmount: BigNumberish, maxDataAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  buyData: TypedContractMethod<
    [language: string, usdcIn: BigNumberish, minDataOut: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  createPool: TypedContractMethod<
    [
      language: string,
      initialDataSupply: BigNumberish,
      initialPrice: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  dataAccessBalance: TypedContractMethod<
    [arg0: string, arg1: AddressLike],
    [bigint],
    "view"
  >;

  defaultFee: TypedContractMethod<[], [bigint], "view">;

  getAmountOut: TypedContractMethod<
    [
      usdcIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      fee: BigNumberish
    ],
    [bigint],
    "view"
  >;

  getPrice: TypedContractMethod<[language: string], [bigint], "view">;

  languagePools: TypedContractMethod<
    [arg0: string],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean, bigint, bigint] & {
        dataTokenSupply: bigint;
        usdcReserve: bigint;
        dataReserve: bigint;
        totalLiquidity: bigint;
        feePercentage: bigint;
        active: boolean;
        lastPriceUpdate: bigint;
        volume24h: bigint;
      }
    ],
    "view"
  >;

  liquidityPositions: TypedContractMethod<
    [arg0: string, arg1: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        liquidity: bigint;
        usdcDeposited: bigint;
        dataDeposited: bigint;
        rewardsClaimed: bigint;
      }
    ],
    "view"
  >;

  oraclePrices: TypedContractMethod<[arg0: string], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  removeLiquidity: TypedContractMethod<
    [language: string, liquidity: BigNumberish],
    [[bigint, bigint] & { usdcAmount: bigint; dataAmount: bigint }],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  sellData: TypedContractMethod<
    [language: string, dataIn: BigNumberish, minUsdcOut: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  twapPrices: TypedContractMethod<[arg0: string], [bigint], "view">;

  usdcToken: TypedContractMethod<[], [string], "view">;

  voiceShares: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "FEE_DENOMINATOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MINIMUM_LIQUIDITY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addLiquidity"
  ): TypedContractMethod<
    [language: string, usdcAmount: BigNumberish, maxDataAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "buyData"
  ): TypedContractMethod<
    [language: string, usdcIn: BigNumberish, minDataOut: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createPool"
  ): TypedContractMethod<
    [
      language: string,
      initialDataSupply: BigNumberish,
      initialPrice: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "dataAccessBalance"
  ): TypedContractMethod<[arg0: string, arg1: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "defaultFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAmountOut"
  ): TypedContractMethod<
    [
      usdcIn: BigNumberish,
      reserveIn: BigNumberish,
      reserveOut: BigNumberish,
      fee: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPrice"
  ): TypedContractMethod<[language: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "languagePools"
  ): TypedContractMethod<
    [arg0: string],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean, bigint, bigint] & {
        dataTokenSupply: bigint;
        usdcReserve: bigint;
        dataReserve: bigint;
        totalLiquidity: bigint;
        feePercentage: bigint;
        active: boolean;
        lastPriceUpdate: bigint;
        volume24h: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "liquidityPositions"
  ): TypedContractMethod<
    [arg0: string, arg1: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        liquidity: bigint;
        usdcDeposited: bigint;
        dataDeposited: bigint;
        rewardsClaimed: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "oraclePrices"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeLiquidity"
  ): TypedContractMethod<
    [language: string, liquidity: BigNumberish],
    [[bigint, bigint] & { usdcAmount: bigint; dataAmount: bigint }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sellData"
  ): TypedContractMethod<
    [language: string, dataIn: BigNumberish, minUsdcOut: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "twapPrices"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "usdcToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "voiceShares"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "DataPurchased"
  ): TypedContractEvent<
    DataPurchasedEvent.InputTuple,
    DataPurchasedEvent.OutputTuple,
    DataPurchasedEvent.OutputObject
  >;
  getEvent(
    key: "DataSold"
  ): TypedContractEvent<
    DataSoldEvent.InputTuple,
    DataSoldEvent.OutputTuple,
    DataSoldEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityAdded"
  ): TypedContractEvent<
    LiquidityAddedEvent.InputTuple,
    LiquidityAddedEvent.OutputTuple,
    LiquidityAddedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidityRemoved"
  ): TypedContractEvent<
    LiquidityRemovedEvent.InputTuple,
    LiquidityRemovedEvent.OutputTuple,
    LiquidityRemovedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PoolCreated"
  ): TypedContractEvent<
    PoolCreatedEvent.InputTuple,
    PoolCreatedEvent.OutputTuple,
    PoolCreatedEvent.OutputObject
  >;
  getEvent(
    key: "PriceUpdated"
  ): TypedContractEvent<
    PriceUpdatedEvent.InputTuple,
    PriceUpdatedEvent.OutputTuple,
    PriceUpdatedEvent.OutputObject
  >;

  filters: {
    "DataPurchased(string,address,uint256,uint256)": TypedContractEvent<
      DataPurchasedEvent.InputTuple,
      DataPurchasedEvent.OutputTuple,
      DataPurchasedEvent.OutputObject
    >;
    DataPurchased: TypedContractEvent<
      DataPurchasedEvent.InputTuple,
      DataPurchasedEvent.OutputTuple,
      DataPurchasedEvent.OutputObject
    >;

    "DataSold(string,address,uint256,uint256)": TypedContractEvent<
      DataSoldEvent.InputTuple,
      DataSoldEvent.OutputTuple,
      DataSoldEvent.OutputObject
    >;
    DataSold: TypedContractEvent<
      DataSoldEvent.InputTuple,
      DataSoldEvent.OutputTuple,
      DataSoldEvent.OutputObject
    >;

    "LiquidityAdded(string,address,uint256,uint256)": TypedContractEvent<
      LiquidityAddedEvent.InputTuple,
      LiquidityAddedEvent.OutputTuple,
      LiquidityAddedEvent.OutputObject
    >;
    LiquidityAdded: TypedContractEvent<
      LiquidityAddedEvent.InputTuple,
      LiquidityAddedEvent.OutputTuple,
      LiquidityAddedEvent.OutputObject
    >;

    "LiquidityRemoved(string,address,uint256)": TypedContractEvent<
      LiquidityRemovedEvent.InputTuple,
      LiquidityRemovedEvent.OutputTuple,
      LiquidityRemovedEvent.OutputObject
    >;
    LiquidityRemoved: TypedContractEvent<
      LiquidityRemovedEvent.InputTuple,
      LiquidityRemovedEvent.OutputTuple,
      LiquidityRemovedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PoolCreated(string,uint256)": TypedContractEvent<
      PoolCreatedEvent.InputTuple,
      PoolCreatedEvent.OutputTuple,
      PoolCreatedEvent.OutputObject
    >;
    PoolCreated: TypedContractEvent<
      PoolCreatedEvent.InputTuple,
      PoolCreatedEvent.OutputTuple,
      PoolCreatedEvent.OutputObject
    >;

    "PriceUpdated(string,uint256)": TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;
    PriceUpdated: TypedContractEvent<
      PriceUpdatedEvent.InputTuple,
      PriceUpdatedEvent.OutputTuple,
      PriceUpdatedEvent.OutputObject
    >;
  };
}
