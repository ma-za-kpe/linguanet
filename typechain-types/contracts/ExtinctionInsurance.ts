/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface ExtinctionInsuranceInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "COVERAGE_PERIOD"
      | "MINIMUM_STAKE"
      | "PAYOUT_MULTIPLIER"
      | "RESERVE_RATIO"
      | "calculatePremium"
      | "cancelPolicy"
      | "claimInsurance"
      | "createInsurancePool"
      | "globalRiskPool"
      | "insurancePools"
      | "languageOracles"
      | "linguaToken"
      | "owner"
      | "policies"
      | "poolReserves"
      | "purchasePolicy"
      | "renewPolicy"
      | "renounceOwnership"
      | "riskScores"
      | "transferOwnership"
      | "updateSpeakerCount"
      | "usdcToken"
      | "voiceShares"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClaimProcessed"
      | "InsurancePoolCreated"
      | "InsuranceTriggered"
      | "OwnershipTransferred"
      | "PolicyPurchased"
      | "PremiumPaid"
      | "SpeakerCountUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "COVERAGE_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MINIMUM_STAKE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAYOUT_MULTIPLIER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "RESERVE_RATIO",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculatePremium",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelPolicy",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimInsurance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createInsurancePool",
    values: [string, BigNumberish, BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "globalRiskPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "insurancePools",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "languageOracles",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "linguaToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "policies",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "poolReserves",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "purchasePolicy",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "renewPolicy", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "riskScores", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateSpeakerCount",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "usdcToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "voiceShares",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "COVERAGE_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MINIMUM_STAKE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAYOUT_MULTIPLIER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "RESERVE_RATIO",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatePremium",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimInsurance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createInsurancePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalRiskPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "insurancePools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "languageOracles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linguaToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "policies", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "purchasePolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renewPolicy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "riskScores", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateSpeakerCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "usdcToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voiceShares",
    data: BytesLike
  ): Result;
}

export namespace ClaimProcessedEvent {
  export type InputTuple = [
    language: string,
    claimant: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    language: string,
    claimant: string,
    amount: bigint
  ];
  export interface OutputObject {
    language: string;
    claimant: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InsurancePoolCreatedEvent {
  export type InputTuple = [
    language: string,
    threshold: BigNumberish,
    premiumRate: BigNumberish
  ];
  export type OutputTuple = [
    language: string,
    threshold: bigint,
    premiumRate: bigint
  ];
  export interface OutputObject {
    language: string;
    threshold: bigint;
    premiumRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InsuranceTriggeredEvent {
  export type InputTuple = [
    language: string,
    speakerCount: BigNumberish,
    totalPayout: BigNumberish
  ];
  export type OutputTuple = [
    language: string,
    speakerCount: bigint,
    totalPayout: bigint
  ];
  export interface OutputObject {
    language: string;
    speakerCount: bigint;
    totalPayout: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PolicyPurchasedEvent {
  export type InputTuple = [
    language: string,
    holder: AddressLike,
    stake: BigNumberish,
    coverage: BigNumberish
  ];
  export type OutputTuple = [
    language: string,
    holder: string,
    stake: bigint,
    coverage: bigint
  ];
  export interface OutputObject {
    language: string;
    holder: string;
    stake: bigint;
    coverage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PremiumPaidEvent {
  export type InputTuple = [
    language: string,
    holder: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [language: string, holder: string, amount: bigint];
  export interface OutputObject {
    language: string;
    holder: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SpeakerCountUpdatedEvent {
  export type InputTuple = [
    language: string,
    oldCount: BigNumberish,
    newCount: BigNumberish
  ];
  export type OutputTuple = [
    language: string,
    oldCount: bigint,
    newCount: bigint
  ];
  export interface OutputObject {
    language: string;
    oldCount: bigint;
    newCount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ExtinctionInsurance extends BaseContract {
  connect(runner?: ContractRunner | null): ExtinctionInsurance;
  waitForDeployment(): Promise<this>;

  interface: ExtinctionInsuranceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  COVERAGE_PERIOD: TypedContractMethod<[], [bigint], "view">;

  MINIMUM_STAKE: TypedContractMethod<[], [bigint], "view">;

  PAYOUT_MULTIPLIER: TypedContractMethod<[], [bigint], "view">;

  RESERVE_RATIO: TypedContractMethod<[], [bigint], "view">;

  calculatePremium: TypedContractMethod<
    [language: string, coverageAmount: BigNumberish],
    [bigint],
    "view"
  >;

  cancelPolicy: TypedContractMethod<[language: string], [void], "nonpayable">;

  claimInsurance: TypedContractMethod<[language: string], [void], "nonpayable">;

  createInsurancePool: TypedContractMethod<
    [
      language: string,
      speakerThreshold: BigNumberish,
      initialSpeakerCount: BigNumberish,
      premiumRate: BigNumberish,
      oracleAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  globalRiskPool: TypedContractMethod<[], [bigint], "view">;

  insurancePools: TypedContractMethod<
    [arg0: string],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, boolean, bigint] & {
        totalStaked: bigint;
        coverageAmount: bigint;
        premiumRate: bigint;
        speakerThreshold: bigint;
        lastSpeakerCount: bigint;
        lastUpdateTime: bigint;
        triggered: boolean;
        payoutPerStaker: bigint;
      }
    ],
    "view"
  >;

  languageOracles: TypedContractMethod<[arg0: string], [string], "view">;

  linguaToken: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  policies: TypedContractMethod<
    [arg0: string, arg1: AddressLike],
    [
      [bigint, bigint, bigint, bigint, boolean] & {
        stakedAmount: bigint;
        premiumPaid: bigint;
        coverageStart: bigint;
        coverageEnd: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  poolReserves: TypedContractMethod<[arg0: string], [bigint], "view">;

  purchasePolicy: TypedContractMethod<
    [language: string, stakeAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  renewPolicy: TypedContractMethod<[language: string], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  riskScores: TypedContractMethod<[arg0: string], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateSpeakerCount: TypedContractMethod<
    [language: string],
    [void],
    "nonpayable"
  >;

  usdcToken: TypedContractMethod<[], [string], "view">;

  voiceShares: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "COVERAGE_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MINIMUM_STAKE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "PAYOUT_MULTIPLIER"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "RESERVE_RATIO"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculatePremium"
  ): TypedContractMethod<
    [language: string, coverageAmount: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "cancelPolicy"
  ): TypedContractMethod<[language: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimInsurance"
  ): TypedContractMethod<[language: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createInsurancePool"
  ): TypedContractMethod<
    [
      language: string,
      speakerThreshold: BigNumberish,
      initialSpeakerCount: BigNumberish,
      premiumRate: BigNumberish,
      oracleAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "globalRiskPool"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "insurancePools"
  ): TypedContractMethod<
    [arg0: string],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, boolean, bigint] & {
        totalStaked: bigint;
        coverageAmount: bigint;
        premiumRate: bigint;
        speakerThreshold: bigint;
        lastSpeakerCount: bigint;
        lastUpdateTime: bigint;
        triggered: boolean;
        payoutPerStaker: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "languageOracles"
  ): TypedContractMethod<[arg0: string], [string], "view">;
  getFunction(
    nameOrSignature: "linguaToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "policies"
  ): TypedContractMethod<
    [arg0: string, arg1: AddressLike],
    [
      [bigint, bigint, bigint, bigint, boolean] & {
        stakedAmount: bigint;
        premiumPaid: bigint;
        coverageStart: bigint;
        coverageEnd: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "poolReserves"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "purchasePolicy"
  ): TypedContractMethod<
    [language: string, stakeAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renewPolicy"
  ): TypedContractMethod<[language: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "riskScores"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateSpeakerCount"
  ): TypedContractMethod<[language: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usdcToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "voiceShares"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ClaimProcessed"
  ): TypedContractEvent<
    ClaimProcessedEvent.InputTuple,
    ClaimProcessedEvent.OutputTuple,
    ClaimProcessedEvent.OutputObject
  >;
  getEvent(
    key: "InsurancePoolCreated"
  ): TypedContractEvent<
    InsurancePoolCreatedEvent.InputTuple,
    InsurancePoolCreatedEvent.OutputTuple,
    InsurancePoolCreatedEvent.OutputObject
  >;
  getEvent(
    key: "InsuranceTriggered"
  ): TypedContractEvent<
    InsuranceTriggeredEvent.InputTuple,
    InsuranceTriggeredEvent.OutputTuple,
    InsuranceTriggeredEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PolicyPurchased"
  ): TypedContractEvent<
    PolicyPurchasedEvent.InputTuple,
    PolicyPurchasedEvent.OutputTuple,
    PolicyPurchasedEvent.OutputObject
  >;
  getEvent(
    key: "PremiumPaid"
  ): TypedContractEvent<
    PremiumPaidEvent.InputTuple,
    PremiumPaidEvent.OutputTuple,
    PremiumPaidEvent.OutputObject
  >;
  getEvent(
    key: "SpeakerCountUpdated"
  ): TypedContractEvent<
    SpeakerCountUpdatedEvent.InputTuple,
    SpeakerCountUpdatedEvent.OutputTuple,
    SpeakerCountUpdatedEvent.OutputObject
  >;

  filters: {
    "ClaimProcessed(string,address,uint256)": TypedContractEvent<
      ClaimProcessedEvent.InputTuple,
      ClaimProcessedEvent.OutputTuple,
      ClaimProcessedEvent.OutputObject
    >;
    ClaimProcessed: TypedContractEvent<
      ClaimProcessedEvent.InputTuple,
      ClaimProcessedEvent.OutputTuple,
      ClaimProcessedEvent.OutputObject
    >;

    "InsurancePoolCreated(string,uint256,uint256)": TypedContractEvent<
      InsurancePoolCreatedEvent.InputTuple,
      InsurancePoolCreatedEvent.OutputTuple,
      InsurancePoolCreatedEvent.OutputObject
    >;
    InsurancePoolCreated: TypedContractEvent<
      InsurancePoolCreatedEvent.InputTuple,
      InsurancePoolCreatedEvent.OutputTuple,
      InsurancePoolCreatedEvent.OutputObject
    >;

    "InsuranceTriggered(string,uint256,uint256)": TypedContractEvent<
      InsuranceTriggeredEvent.InputTuple,
      InsuranceTriggeredEvent.OutputTuple,
      InsuranceTriggeredEvent.OutputObject
    >;
    InsuranceTriggered: TypedContractEvent<
      InsuranceTriggeredEvent.InputTuple,
      InsuranceTriggeredEvent.OutputTuple,
      InsuranceTriggeredEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PolicyPurchased(string,address,uint256,uint256)": TypedContractEvent<
      PolicyPurchasedEvent.InputTuple,
      PolicyPurchasedEvent.OutputTuple,
      PolicyPurchasedEvent.OutputObject
    >;
    PolicyPurchased: TypedContractEvent<
      PolicyPurchasedEvent.InputTuple,
      PolicyPurchasedEvent.OutputTuple,
      PolicyPurchasedEvent.OutputObject
    >;

    "PremiumPaid(string,address,uint256)": TypedContractEvent<
      PremiumPaidEvent.InputTuple,
      PremiumPaidEvent.OutputTuple,
      PremiumPaidEvent.OutputObject
    >;
    PremiumPaid: TypedContractEvent<
      PremiumPaidEvent.InputTuple,
      PremiumPaidEvent.OutputTuple,
      PremiumPaidEvent.OutputObject
    >;

    "SpeakerCountUpdated(string,uint256,uint256)": TypedContractEvent<
      SpeakerCountUpdatedEvent.InputTuple,
      SpeakerCountUpdatedEvent.OutputTuple,
      SpeakerCountUpdatedEvent.OutputObject
    >;
    SpeakerCountUpdated: TypedContractEvent<
      SpeakerCountUpdatedEvent.InputTuple,
      SpeakerCountUpdatedEvent.OutputTuple,
      SpeakerCountUpdatedEvent.OutputObject
    >;
  };
}
