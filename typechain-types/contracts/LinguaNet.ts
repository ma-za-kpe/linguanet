/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface LinguaNetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CONTRIBUTOR_REWARD"
      | "VALIDATOR_REWARD"
      | "balances"
      | "becomeValidator"
      | "getBalance"
      | "getSubmission"
      | "languageStats"
      | "owner"
      | "purchaseDataset"
      | "submissionCount"
      | "submissions"
      | "submitAudio"
      | "validateAudio"
      | "validators"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AudioSubmitted"
      | "AudioValidated"
      | "DatasetPurchased"
      | "RewardPaid"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CONTRIBUTOR_REWARD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VALIDATOR_REWARD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "balances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "becomeValidator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubmission",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "languageStats",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchaseDataset",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "submissionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submissions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitAudio",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "validateAudio",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validators",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "CONTRIBUTOR_REWARD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VALIDATOR_REWARD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "becomeValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSubmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "languageStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseDataset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submissionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submissions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitAudio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateAudio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validators", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace AudioSubmittedEvent {
  export type InputTuple = [
    submissionId: BigNumberish,
    contributor: AddressLike,
    language: string,
    cid: string
  ];
  export type OutputTuple = [
    submissionId: bigint,
    contributor: string,
    language: string,
    cid: string
  ];
  export interface OutputObject {
    submissionId: bigint;
    contributor: string;
    language: string;
    cid: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AudioValidatedEvent {
  export type InputTuple = [
    submissionId: BigNumberish,
    validator: AddressLike,
    qualityScore: BigNumberish
  ];
  export type OutputTuple = [
    submissionId: bigint,
    validator: string,
    qualityScore: bigint
  ];
  export interface OutputObject {
    submissionId: bigint;
    validator: string;
    qualityScore: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DatasetPurchasedEvent {
  export type InputTuple = [
    buyer: AddressLike,
    language: string,
    clipCount: BigNumberish,
    price: BigNumberish
  ];
  export type OutputTuple = [
    buyer: string,
    language: string,
    clipCount: bigint,
    price: bigint
  ];
  export interface OutputObject {
    buyer: string;
    language: string;
    clipCount: bigint;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardPaidEvent {
  export type InputTuple = [
    recipient: AddressLike,
    amount: BigNumberish,
    rewardType: string
  ];
  export type OutputTuple = [
    recipient: string,
    amount: bigint,
    rewardType: string
  ];
  export interface OutputObject {
    recipient: string;
    amount: bigint;
    rewardType: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LinguaNet extends BaseContract {
  connect(runner?: ContractRunner | null): LinguaNet;
  waitForDeployment(): Promise<this>;

  interface: LinguaNetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CONTRIBUTOR_REWARD: TypedContractMethod<[], [bigint], "view">;

  VALIDATOR_REWARD: TypedContractMethod<[], [bigint], "view">;

  balances: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  becomeValidator: TypedContractMethod<[], [void], "nonpayable">;

  getBalance: TypedContractMethod<[_user: AddressLike], [bigint], "view">;

  getSubmission: TypedContractMethod<
    [_id: BigNumberish],
    [
      [string, string, string, bigint, boolean, bigint] & {
        contributor: string;
        language: string;
        cid: string;
        timestamp: bigint;
        validated: boolean;
        qualityScore: bigint;
      }
    ],
    "view"
  >;

  languageStats: TypedContractMethod<[arg0: string], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  purchaseDataset: TypedContractMethod<[_language: string], [void], "payable">;

  submissionCount: TypedContractMethod<[], [bigint], "view">;

  submissions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, boolean, bigint] & {
        contributor: string;
        language: string;
        filecoinCID: string;
        timestamp: bigint;
        validated: boolean;
        qualityScore: bigint;
      }
    ],
    "view"
  >;

  submitAudio: TypedContractMethod<
    [_language: string, _filecoinCID: string],
    [void],
    "nonpayable"
  >;

  validateAudio: TypedContractMethod<
    [_submissionId: BigNumberish, _qualityScore: BigNumberish],
    [void],
    "nonpayable"
  >;

  validators: TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint] & {
        isActive: boolean;
        validationCount: bigint;
        reputation: bigint;
      }
    ],
    "view"
  >;

  withdraw: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CONTRIBUTOR_REWARD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VALIDATOR_REWARD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "balances"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "becomeValidator"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[_user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSubmission"
  ): TypedContractMethod<
    [_id: BigNumberish],
    [
      [string, string, string, bigint, boolean, bigint] & {
        contributor: string;
        language: string;
        cid: string;
        timestamp: bigint;
        validated: boolean;
        qualityScore: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "languageStats"
  ): TypedContractMethod<[arg0: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "purchaseDataset"
  ): TypedContractMethod<[_language: string], [void], "payable">;
  getFunction(
    nameOrSignature: "submissionCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "submissions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, boolean, bigint] & {
        contributor: string;
        language: string;
        filecoinCID: string;
        timestamp: bigint;
        validated: boolean;
        qualityScore: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "submitAudio"
  ): TypedContractMethod<
    [_language: string, _filecoinCID: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validateAudio"
  ): TypedContractMethod<
    [_submissionId: BigNumberish, _qualityScore: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "validators"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint] & {
        isActive: boolean;
        validationCount: bigint;
        reputation: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "AudioSubmitted"
  ): TypedContractEvent<
    AudioSubmittedEvent.InputTuple,
    AudioSubmittedEvent.OutputTuple,
    AudioSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "AudioValidated"
  ): TypedContractEvent<
    AudioValidatedEvent.InputTuple,
    AudioValidatedEvent.OutputTuple,
    AudioValidatedEvent.OutputObject
  >;
  getEvent(
    key: "DatasetPurchased"
  ): TypedContractEvent<
    DatasetPurchasedEvent.InputTuple,
    DatasetPurchasedEvent.OutputTuple,
    DatasetPurchasedEvent.OutputObject
  >;
  getEvent(
    key: "RewardPaid"
  ): TypedContractEvent<
    RewardPaidEvent.InputTuple,
    RewardPaidEvent.OutputTuple,
    RewardPaidEvent.OutputObject
  >;

  filters: {
    "AudioSubmitted(uint256,address,string,string)": TypedContractEvent<
      AudioSubmittedEvent.InputTuple,
      AudioSubmittedEvent.OutputTuple,
      AudioSubmittedEvent.OutputObject
    >;
    AudioSubmitted: TypedContractEvent<
      AudioSubmittedEvent.InputTuple,
      AudioSubmittedEvent.OutputTuple,
      AudioSubmittedEvent.OutputObject
    >;

    "AudioValidated(uint256,address,uint256)": TypedContractEvent<
      AudioValidatedEvent.InputTuple,
      AudioValidatedEvent.OutputTuple,
      AudioValidatedEvent.OutputObject
    >;
    AudioValidated: TypedContractEvent<
      AudioValidatedEvent.InputTuple,
      AudioValidatedEvent.OutputTuple,
      AudioValidatedEvent.OutputObject
    >;

    "DatasetPurchased(address,string,uint256,uint256)": TypedContractEvent<
      DatasetPurchasedEvent.InputTuple,
      DatasetPurchasedEvent.OutputTuple,
      DatasetPurchasedEvent.OutputObject
    >;
    DatasetPurchased: TypedContractEvent<
      DatasetPurchasedEvent.InputTuple,
      DatasetPurchasedEvent.OutputTuple,
      DatasetPurchasedEvent.OutputObject
    >;

    "RewardPaid(address,uint256,string)": TypedContractEvent<
      RewardPaidEvent.InputTuple,
      RewardPaidEvent.OutputTuple,
      RewardPaidEvent.OutputObject
    >;
    RewardPaid: TypedContractEvent<
      RewardPaidEvent.InputTuple,
      RewardPaidEvent.OutputTuple,
      RewardPaidEvent.OutputObject
    >;
  };
}
